/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LED_H
#define _MOCK_LED_H

#include "unity.h"
#include "led.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_led_Init(void);
void mock_led_Destroy(void);
void mock_led_Verify(void);




#define led_turn_off_Ignore() led_turn_off_CMockIgnore()
void led_turn_off_CMockIgnore(void);
#define led_turn_off_StopIgnore() led_turn_off_CMockStopIgnore()
void led_turn_off_CMockStopIgnore(void);
#define led_turn_off_Expect(index) led_turn_off_CMockExpect(__LINE__, index)
void led_turn_off_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t index);
typedef void (* CMOCK_led_turn_off_CALLBACK)(uint8_t index, int cmock_num_calls);
void led_turn_off_AddCallback(CMOCK_led_turn_off_CALLBACK Callback);
void led_turn_off_Stub(CMOCK_led_turn_off_CALLBACK Callback);
#define led_turn_off_StubWithCallback led_turn_off_Stub
#define led_turn_on_Ignore() led_turn_on_CMockIgnore()
void led_turn_on_CMockIgnore(void);
#define led_turn_on_StopIgnore() led_turn_on_CMockStopIgnore()
void led_turn_on_CMockStopIgnore(void);
#define led_turn_on_Expect(index) led_turn_on_CMockExpect(__LINE__, index)
void led_turn_on_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t index);
typedef void (* CMOCK_led_turn_on_CALLBACK)(uint8_t index, int cmock_num_calls);
void led_turn_on_AddCallback(CMOCK_led_turn_on_CALLBACK Callback);
void led_turn_on_Stub(CMOCK_led_turn_on_CALLBACK Callback);
#define led_turn_on_StubWithCallback led_turn_on_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
